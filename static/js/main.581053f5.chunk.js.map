{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qVAIaA,G,YAAO,SAAAC,GAAK,OAExB,yBAAKC,UAAU,kBACd,yBAAKC,IAAI,UACTC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAGH,gCAAML,EAAMI,QAAQE,KAApB,KACA,+BAAKN,EAAMI,QAAQG,MAAnB,QCRWC,EAAW,SAAAR,GAAK,OAC3B,yBAAKC,UAAU,aACZD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACzB,kBAAC,EAAD,CAAMO,IAAKP,EAAQC,GAAID,QAASA,SCAzBQ,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OAExB,2BACCb,UAAU,SACVc,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCsDGG,G,kBA1Db,aAAe,IAAD,8BACZ,+CAcHH,aAAe,SAAAI,GAKd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAjBpC,EAAKC,MAAQ,CACdd,SAAU,GACVW,YAAa,IALA,E,iFASO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEV,SAAUmB,S,+BAUpC,MAGyBC,KAAKN,MAA/Bd,EAHC,EAGDA,SAAUW,EAHT,EAGSA,YACZU,EAAmBrB,EAASsB,QAAQ,SAAA3B,GAAO,OAChDA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYY,kBAG/C,OACE,yBAAK/B,UAAU,OACjB,kDAUA,kBAAC,EAAD,CACCY,YAAY,kBACZC,aAAce,KAAKf,eAGhB,kBAAC,EAAD,CAAUL,SAAUqB,S,GAhDVI,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.581053f5.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css';\n\nexport const Card = props => (\n\n\t<div className='card-container'>\n\t\t<img alt='monster' \n\t\tsrc={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\n\n\t\t\n\t\t<h2> {props.monster.name} </h2>\n\t\t<p> {props.monster.email} </p>\n\n\t</div>\n);\n\n","import React from 'react';\nimport './card-list.styles.css';\nimport { Card } from '../card/card.component';\n\nexport const CardList = props => (\n  <div className=\"card-list\">\n    {props.monsters.map(monster => (\n      <Card key={monster.id} monster={monster} ></Card>\n    ))}\n  </div>\n);\n","import React from 'react';\n\nimport './search-box.styles.css';\n\n// this is functional components unlike class components, it don't have access to this.state\n// because it don't have access to constructor, and also it don't access to lifecycle methods.\n// it just a component that gets some props and returns some HTML\nexport const SearchBox = ({ placeholder, handleChange}) => (\n\n\t<input\n\t\tclassName='search' \n\t\ttype='search' \n\t\tplaceholder={placeholder} \n\t\tonChange={handleChange}>\n\t</input>\n)","import React, { Component } from \"react\";\n// import logo from './logo.svg';\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\nimport \"./App.css\";\n\n// using class component, we can access this thing called state.\n// state is some object\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n\t\t\tmonsters: [],\n\t\t\tsearchField: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }));\n\t}\n\t\n\thandleChange = e => {\n// Which means that when javascript first created our app component it also defined all of the methods\n// on our components including handle change and it saw that this was an arrow function and because of\n// this when this arrow function came into existence to JavaScript it was going to bind any references\n// to this inside of it to the context in which it was defined which is our app component \n\t\tthis.setState({ searchField: e.target.value });\n\t}\n  render() {\n\t\t// make a new array, because don't want to modify the raw data (monsters array)\n\t\t// Destructure concept. it pulls the properites off of the object and set them to constant\n\t\tconst { monsters, searchField } = this.state;\n\t\tconst filteredMonsters = monsters.filter( monster =>\n\t\t\tmonster.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t\t);\n\n    return (\n      <div className=\"App\">\n\t\t\t\t<h1> Monsters Rolodex </h1>\n\t\t\t\t{/* e  represent the synthetic event */}\n\t\t\t\t{/* setState is a Asynchronous function, so the state will be updated  after entering text into search bar next times */}\n\t\t\t\t{/* onChange is a synthetic event, in any time it will run this function setState once. \n\t\t\t\tnot calling the render() method again and again since setState will trigger the render() method */}\n\t\t\t\t{/* https://reactjs.org/docs/events.html */}\n\t\t\t\t{/* <input type='search' \n\t\t\t\t\t\t\t placeholder='search monsters' \n\t\t\t\t\t\t\t onChange={e => this.setState({ searchField: e.target.value })}>\n\t\t\t\t </input> */}\n\t\t\t\t<SearchBox \n\t\t\t\t\tplaceholder='search monsters'\n\t\t\t\t\thandleChange={this.handleChange}>\n\n\t\t\t\t</SearchBox>\n        <CardList monsters={filteredMonsters}>\n        \n        </CardList>\n      </div>\n    );\n  }\n}\n\n// {'inside curly brackets is Javascript expression'}\n// when the state is changed, the render() method will be called again\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// 'react' library allows us to write HTML syntax inside a javascript file\nimport React from 'react';\n// react-dom actually interact with DOM \nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}